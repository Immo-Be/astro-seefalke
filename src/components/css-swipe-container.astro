---
interface Props {
  class?: string;
  gridOnDesktop?: boolean;
}

const {class: className, gridOnDesktop} = Astro.props;
---

<div
  class:list={[
    'swipe-container',
    gridOnDesktop && 'grid-on-desktop',
    className
  ]}
>
  <slot />

  <style is:global>
    .swipe-container {
      display: flex;
      overflow-x: auto;
      align-items: center;
      scroll-snap-type: x mandatory; /* mandatory causes flickr */
      scroll-behavior: smooth;
      pointer-events: fill; /* Disable pointer events on non-clickable div */
      background: var(--clr-background);
      gap: 12px;
    }

    .swipe-container > *:not(svg) {
      overflow-wrap: break-word;
      z-index: 2;
      transition: transform 0.4s ease;
      scroll-snap-align: start;
      flex-shrink: 0;
      flex-basis: 100%;
      border-radius: 10px 10px 10px 10px;
      transition: transform 0.5s;
      color: var(--clr-accent);
      background: var(--clr-background);
    }

    @media (min-width: 600px) {
      .grid-on-desktop {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
        grid-auto-rows: auto; /* Dynamic rows with a fixed height */
        justify-items: center;
        gap: 2rem;
        background-color: var(--clr-accent);
        color: var(--clr-background);
      }
    }
  </style>
</div>
